// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RTS.Accounting.Infrastructure;

#nullable disable

namespace RTS.Accounting.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240424145004_DbInit")]
    partial class DbInit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RTS.Accounting.Domain.Entities.BaseDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ExternalInvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("TotalAmount")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BaseDocuments");

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("RTS.Accounting.Domain.Entities.DependentCreditNote", b =>
                {
                    b.HasBaseType("RTS.Accounting.Domain.Entities.BaseDocument");

                    b.Property<int>("ParentInvoiceId")
                        .HasColumnType("int");

                    b.HasIndex("ParentInvoiceId");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("RTS.Accounting.Domain.Entities.IndependentCreditNote", b =>
                {
                    b.HasBaseType("RTS.Accounting.Domain.Entities.BaseDocument");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("RTS.Accounting.Domain.Entities.InvoiceDocument", b =>
                {
                    b.HasBaseType("RTS.Accounting.Domain.Entities.BaseDocument");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("RTS.Accounting.Domain.Entities.DependentCreditNote", b =>
                {
                    b.HasOne("RTS.Accounting.Domain.Entities.InvoiceDocument", "ParentInvoice")
                        .WithMany("CreditNotes")
                        .HasForeignKey("ParentInvoiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ParentInvoice");
                });

            modelBuilder.Entity("RTS.Accounting.Domain.Entities.InvoiceDocument", b =>
                {
                    b.Navigation("CreditNotes");
                });
#pragma warning restore 612, 618
        }
    }
}
